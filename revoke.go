package siwarest

import (
	"context"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// RevokeTokensInput is a parameter to call Revoke tokens API.
type RevokeTokensInput interface {
	apply(*url.Values) error
}

type revokeTokensInputWithAccessToken struct {
	accessToken string
}

func (r *revokeTokensInputWithAccessToken) apply(v *url.Values) error {
	if r.accessToken == "" {
		return errors.New("siwarest: access_token is empty")
	}

	v.Add("token_type_hint", "access_token")
	v.Add("token", r.accessToken)

	return nil
}

// RevokeTokensInputWithAccessToken is an access token generated by Generate and validate tokens API.
func RevokeTokensInputWithAccessToken(token string) RevokeTokensInput {
	return &revokeTokensInputWithAccessToken{
		accessToken: token,
	}
}

type revokeTokensInputWithRefreshToken struct {
	refreshToken string
}

func (r *revokeTokensInputWithRefreshToken) apply(v *url.Values) error {
	if r.refreshToken == "" {
		return errors.New("siwarest: refresh_token is empty")
	}

	v.Add("token_type_hint", "refresh_token")
	v.Add("token", r.refreshToken)

	return nil
}

// RevokeTokensInputWithRefreshToken is a refresh token generated by Generate and validate tokens API.
func RevokeTokensInputWithRefreshToken(token string) RevokeTokensInput {
	return &revokeTokensInputWithRefreshToken{
		refreshToken: token,
	}
}

// RevokeTokens invalidates the tokens and associated user authorizations for a user when they are no longer associated with your app.
//
// Please see also https://developer.apple.com/documentation/sign_in_with_apple/revoke_tokens
func (c *Client) RevokeTokens(ctx context.Context, input RevokeTokensInput) error {
	u := *c.baseURL
	u.Path = "/auth/revoke"

	body, err := c.newRequestBody()
	if err != nil {
		return err
	}
	if err := input.apply(body); err != nil {
		return err
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodPost, u.String(), strings.NewReader(body.Encode()))
	if err != nil {
		return fmt.Errorf("siwarest: failed to create request: %w", err)
	}
	c.setHeader(req)

	resp, err := c.hc.Do(req)
	if err != nil {
		return fmt.Errorf("siwarest: failed to call api: %w", err)
	}
	defer resp.Body.Close()

	if err := c.validResponse(resp); err != nil {
		return err
	}
	io.Copy(io.Discard, resp.Body)

	return nil
}
