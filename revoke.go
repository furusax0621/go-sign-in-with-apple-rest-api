package siwarest

import (
	"context"
	"errors"
	"fmt"
	"io"
	"net/http"
	"strings"
)

// RevokeTokensInput is a parameter to call Revoke tokens API.
type RevokeTokensInput struct {
	// AccessTokens is an access token generated by Generate and validate tokens API.
	AccessToken string
	// RefreshToken is a refresh token generated by Generate and validate tokens API.
	RefreshToken string
}

// RevokeTokens invalidates the tokens and associated user authorizations for a user when they are no longer associated with your app.
//
// RevokeTokensInput requires either an access token or a refresh token. If both are specified or both are empty, returns error.
//
// Please see also https://developer.apple.com/documentation/sign_in_with_apple/revoke_tokens
func (c *Client) RevokeTokens(ctx context.Context, input *RevokeTokensInput) error {
	var token, tokenType string

	if input.AccessToken == "" && input.RefreshToken == "" {
		return errors.New("siwarest: access token and refresh token are empty")
	}

	if input.AccessToken != "" {
		token = input.AccessToken
		tokenType = "access_token"
	}
	if input.RefreshToken != "" {
		if input.AccessToken != "" {
			return errors.New("siwarest: both tokens are specified")
		}

		token = input.RefreshToken
		tokenType = "refresh_token"
	}

	u := *c.baseURL
	u.Path = "/auth/revoke"

	body, err := c.newRequestBody()
	if err != nil {
		return err
	}
	body.Add("token", token)
	body.Add("token_type_hint", tokenType)

	req, err := http.NewRequestWithContext(ctx, http.MethodPost, u.String(), strings.NewReader(body.Encode()))
	if err != nil {
		return fmt.Errorf("siwarest: failed to create request: %w", err)
	}
	c.setHeader(req)

	resp, err := c.hc.Do(req)
	if err != nil {
		return fmt.Errorf("siwarest: failed to call api: %w", err)
	}
	defer resp.Body.Close()

	if err := c.validResponse(resp); err != nil {
		return err
	}
	io.Copy(io.Discard, resp.Body)

	return nil
}
